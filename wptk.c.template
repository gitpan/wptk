/*

wptk - a poor man's windowing shell (wish) for Perl/Tk

Invoke a Perl/Tk template program that requires the user's program. The
template creates $mw, the MainWindow, and invokes MainLoop automatically.
The varibale $mw is global and is useable by the user's program.

sol0@lehigh.edu

Copyright (C) 2003 - 2003, Steve Lidie. All rights reserved.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

 */

#include <stdio.h>
#include <sys/errno.h>
#include <sys/stat.h>
#include <sys/syslimits.h>

#define ROOT "WPTKROOT"
#define PERL ROOT"/perl"
#define TEMPLATE ROOT"/wptk.template"
#define VERSION "WPTKVERSION"

int main (int argc, char *argv[]) {

  char *args [ PATH_MAX + 1 ];
  int nargs = 0;
  char file [ PATH_MAX + 1 ];
  char perlargs [ PATH_MAX + 1 ] = "-w";
  struct stat stbuf;

  /* First argument may be the Perl/Tk file name or a string containing
     one or more space-separated Perl arguments.  So the file name is
     either the first or second argument.  Any arguments after the file
     name are Tk options.
  */

  --argc;
  *++argv;			/* skip program name */

  if ( argc == 1 && strcmp( argv[0], "-h" ) == 0 ) {
    printf("Version %s usage: wptk pTk-file [ Tk options ]\n", VERSION);
    exit(0);
  }

  if ( argc == 0 ) {
    strcpy( file, "-" );	/* if stdin */
    --argc;
  } else if ( argc == 1  ) {	/* only a Perl/Tk file name */
    strcpy( file, argv[0] );
  } else if ( argc >= 1 && ! stat( argv[0], &stbuf ) ) { /* no Perl args */
    strcpy( file, argv[0] );
    --argc;
    *++argv;			/* skip Perl/Tk file name */
  } else {
    strcpy( perlargs, argv[0] );
    --argc;
    *++argv;			/* skip Perl args */
    strcpy( file, argv[0] );
    --argc;
    *++argv;			/* skip Perl/Tk file name */
  }

  /*printf("Perl args=%s!\n", perlargs);
    printf("pTk file=%s!\n", file);*/

  args[nargs++] = PERL;
  args[nargs++] = perlargs;
  args[nargs++] = TEMPLATE;
  args[nargs++] = file;

  while ( --argc >= 0 ) { 
    args[nargs++] = *argv++;
    /*    printf("wptk %s!\n", args[nargs-1]);*/
  }
  args[nargs] = (char *)0;

  execv( PERL, args );
  printf("wptk exec() error=%d!\n", errno);
  printf("nargs=%d!\n", nargs);
  while ( --nargs >= 0 ) { 
    printf("  arg %d='%s'\n", nargs, args[nargs]);
  }
  
  exit(1);

} /* end main */
